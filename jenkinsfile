pipeline {
    
    agent {
        label 'Slave1'
    }

    tools 
    {
        maven 'Maven-3.8.7'
    }
    
    stages {
        stage('SCM-Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/csark966/Insurance_project.git'

            }
        }
        stage('Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
		}
		stage("Docker build"){
	        steps {
					sh 'docker version'
					sh "docker build -t csark/insurance-app:${BUILD_NUMBER} ."
					sh 'docker image list'
					sh "docker tag csark/insurance-app:${BUILD_NUMBER} csark/insurance-app:latest"
	            }
	        }
	    stage('Login2DockerHub') {
    steps {
        withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
            sh """
            echo "${DOCKERHUB_CREDENTIALS_PSW}" > /tmp/dockerhub_password
            docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin < /tmp/dockerhub_password
            rm /tmp/dockerhub_password
            """
        }
    }
}
stage('Push2DockerHub') {

			steps {
				sh "docker push csark/insurance-app:latest"
			}
		}
stage('Approve - Deployment to Kubernetes Cluster'){
            steps{
                
                //----------------send an approval prompt-----------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }

	stage('Deploy to Kubernetes Cluster') {
            steps {
		script {
sshPublisher(publishers: [sshPublisherDesc(configName: 'Kube_master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f insurancedeployment.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
		}
            }
	}
    }
}
    
